{"version":3,"file":"index.js","sourceRoot":"/","sources":["index.ts"],"names":[],"mappings":";;AAeA,SAAS,SAAS,CAAC,GAAW;IAC5B,OAAO,GAAG,CAAC,OAAO,CAAC,cAAc,EAAE,UAAU,CAAC,EAAE,CAAC;QAC7C,OAAO,CAAC,CAAC,WAAW,EAAE,CAAC;IAC3B,CAAC,CAAC,CAAC;AACL,CAAC;AAED,SAAS,IAAI,CAAC,GAAG;IACf,IAAI,CAAC,GAAG,IAAI,OAAO,GAAG,KAAK,QAAQ;QAAE,OAAO,GAAG,CAAC;IAChD,IAAI,GAAG,YAAY,IAAI,IAAI,GAAG,YAAY,MAAM;QAAE,OAAO,GAAG,CAAC;IAC7D,IAAI,KAAK,CAAC,OAAO,CAAC,GAAG,CAAC;QAAE,OAAO,GAAG,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC;IAE7C,OAAO,MAAM,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,MAAM,CAAC,CAAC,GAAG,EAAE,GAAG,EAAE,EAAE;QAC1C,MAAM,KAAK,GAAG,SAAS,CAAC,GAAG,CAAC,CAAC;QAC7B,GAAG,CAAC,KAAK,CAAC,GAAG,IAAI,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC;QAC5B,OAAO,GAAG,CAAC;IACb,CAAC,EAAE,EAAE,CAAC,CAAC;AACT,CAAC;AAED,SAAwB,QAAQ,CAC9B,GAAM;IAEN,OAAO,OAAO,GAAG,KAAK,QAAQ,CAAC,CAAC,CAAC,SAAS,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;AAC9D,CAAC;AAJD,2BAIC","sourcesContent":["type CamelCase<S extends string> =\n  S extends `${infer P1}_${infer P2}${infer P3}`\n    ? `${Lowercase<P1>}${Uppercase<P2>}${CamelCase<P3>}`\n    : Lowercase<S>;\n\nexport type Camelize<T> = {\n  [K in keyof T as CamelCase<string & K>]: T[K] extends Array<infer U>\n    ? U extends {}\n      ? Array<Camelize<U>>\n      : T[K]\n    : T[K] extends {}\n    ? Camelize<T[K]>\n    : T[K];\n};\n\nfunction camelCase(str: string) {\n  return str.replace(/[_.-](\\w|$)/g, function (_, x) {\n      return x.toUpperCase();\n  });\n}\n\nfunction walk(obj): any {\n  if (!obj || typeof obj !== \"object\") return obj;\n  if (obj instanceof Date || obj instanceof RegExp) return obj;\n  if (Array.isArray(obj)) return obj.map(walk);\n\n  return Object.keys(obj).reduce((res, key) => {\n    const camel = camelCase(key);\n    res[camel] = walk(obj[key]);\n    return res;\n  }, {});\n}\n\nexport default function camelize<T>(\n  obj: T\n): T extends String ? string : Camelize<T> {\n  return typeof obj === \"string\" ? camelCase(obj) : walk(obj);\n}\n"]}