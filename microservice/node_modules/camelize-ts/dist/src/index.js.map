{"version":3,"file":"index.js","sourceRoot":"/","sources":["src/index.ts"],"names":[],"mappings":";;AAAA,+BAA4B;AAC5B,mCAAkC;AAclC,SAAS,IAAI,CAAC,GAAG;IACf,IAAI,CAAC,GAAG,IAAI,OAAO,GAAG,KAAK,QAAQ;QAAE,OAAO,GAAG,CAAA;IAC/C,IAAI,YAAK,CAAC,MAAM,CAAC,GAAG,CAAC,IAAI,YAAK,CAAC,QAAQ,CAAC,GAAG,CAAC;QAAE,OAAO,GAAG,CAAA;IACxD,IAAI,KAAK,CAAC,OAAO,CAAC,GAAG,CAAC;QAAE,OAAO,GAAG,CAAC,GAAG,CAAC,IAAI,CAAC,CAAA;IAE5C,OAAO,MAAM,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,MAAM,CAAC,CAAC,GAAG,EAAE,GAAG,EAAE,EAAE;QAC1C,MAAM,KAAK,GAAG,kBAAS,CAAC,GAAG,CAAC,CAAA;QAC5B,GAAG,CAAC,KAAK,CAAC,GAAG,IAAI,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAA;QAC3B,OAAO,GAAG,CAAA;IACZ,CAAC,EAAE,EAAE,CAAC,CAAA;AACR,CAAC;AAED,SAAwB,QAAQ,CAAI,GAAM;IACxC,OAAO,CAAC,OAAO,GAAG,KAAK,QAAQ,CAAC,CAAC,CAAC,kBAAS,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,CAAA;AAC/D,CAAC;AAFD,2BAEC","sourcesContent":["import { types } from 'util'\nimport { camelCase } from 'lodash'\n\ntype CamelCase<S extends string> = S extends `${infer P1}_${infer P2}${infer P3}`\n  ? `${Lowercase<P1>}${Uppercase<P2>}${CamelCase<P3>}`\n  : Lowercase<S>\n\ntype KeysToCamelCase<T> = {\n  [K in keyof T as CamelCase<string &K>]: (\n    T[K] extends Array<infer U>\n      ? (U extends {} ? Array<KeysToCamelCase<U>> : T[K])\n      : (T[K] extends {} ? KeysToCamelCase<T[K]> : T[K])\n  )\n}\n\nfunction walk(obj): any {\n  if (!obj || typeof obj !== 'object') return obj\n  if (types.isDate(obj) || types.isRegExp(obj)) return obj\n  if (Array.isArray(obj)) return obj.map(walk)\n\n  return Object.keys(obj).reduce((res, key) => {\n    const camel = camelCase(key)\n    res[camel] = walk(obj[key])\n    return res\n  }, {})\n}\n\nexport default function camelize<T>(obj: T): T extends String ? string : KeysToCamelCase<T> {\n  return (typeof obj === 'string' ? camelCase(obj) : walk(obj))\n}\n"]}