import { Credentials } from './utils/auth';
import { Cache } from './resources/cache';
import { Users } from './resources/users';
import { Groups } from './resources/groups';
import { Roles } from './resources/roles';
import { Clients } from './resources/clients';
import { Realms } from './resources/realms';
import { ClientScopes } from './resources/clientScopes';
import { ClientPolicies } from './resources/clientPolicies';
import { IdentityProviders } from './resources/identityProviders';
import { Components } from './resources/components';
import { AuthenticationManagement } from './resources/authenticationManagement';
import { ServerInfo } from './resources/serverInfo';
import { WhoAmI } from './resources/whoAmI';
import { AttackDetection } from './resources/attackDetection';
import { AxiosRequestConfig } from 'axios';
import { Sessions } from './resources/sessions';
import { UserStorageProvider } from './resources/userStorageProvider';
import type { KeycloakInstance, KeycloakInitOptions, KeycloakConfig } from 'keycloak-js';
import { RequestArgs } from './resources/agent';
export interface ConnectionConfig {
    baseUrl?: string;
    realmName?: string;
    requestConfig?: AxiosRequestConfig;
    requestArgOptions?: Pick<RequestArgs, 'catchNotFound'>;
}
export declare class KeycloakAdminClient {
    users: Users;
    userStorageProvider: UserStorageProvider;
    groups: Groups;
    roles: Roles;
    clients: Clients;
    realms: Realms;
    clientScopes: ClientScopes;
    clientPolicies: ClientPolicies;
    identityProviders: IdentityProviders;
    components: Components;
    serverInfo: ServerInfo;
    whoAmI: WhoAmI;
    attackDetection: AttackDetection;
    sessions: Sessions;
    authenticationManagement: AuthenticationManagement;
    cache: Cache;
    baseUrl: string;
    realmName: string;
    accessToken?: string;
    refreshToken?: string;
    keycloak?: KeycloakInstance;
    private requestConfig?;
    private globalRequestArgOptions?;
    constructor(connectionConfig?: ConnectionConfig);
    auth(credentials: Credentials): Promise<void>;
    init(init?: KeycloakInitOptions, config?: KeycloakConfig): Promise<void>;
    setAccessToken(token: string): void;
    getAccessToken(): Promise<string | undefined>;
    getRequestConfig(): AxiosRequestConfig<any> | undefined;
    getGlobalRequestArgOptions(): Pick<RequestArgs, 'catchNotFound'> | undefined;
    setConfig(connectionConfig: ConnectionConfig): void;
}
